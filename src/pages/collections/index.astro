---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import GrowthBadge from '../../components/GrowthBadge.astro';

const collections = await getCollection('collections');
const sortedCollections = collections
  .filter((collection) => !collection.data.draft)
  .sort((a, b) => b.data.updated.getTime() - a.data.updated.getTime());
---

<BaseLayout title="Collections">
  <div class="page">
    <header class="page-header">
      <h1>Collections</h1>
      <p class="page-description">
        Curated lists, bookmarks, and resources on topics I find interesting.
      </p>
    </header>

    {
      sortedCollections.length > 0 ? (
        <ul class="content-list">
          {sortedCollections.map((collection) => (
            <li>
              <a href={`/collections/${collection.slug}`}>
                <div class="content-item">
                  <div class="content-header">
                    <h2 class="content-title">{collection.data.title}</h2>
                    <GrowthBadge growth={collection.data.growth} />
                  </div>
                  <div class="content-meta">
                    <time datetime={collection.data.updated.toISOString()}>
                      {collection.data.updated.toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric',
                      })}
                    </time>
                  </div>
                </div>
              </a>
            </li>
          ))}
        </ul>
      ) : (
        <p class="empty-state">
          No collections yet. Create your first in{' '}
          <code>src/content/collections/</code>
        </p>
      )
    }
  </div>
</BaseLayout>

<style>
  .page {
    max-width: var(--measure-wide);
  }

  .page-header {
    margin-bottom: var(--space-8);
    padding-bottom: var(--space-6);
    border-bottom: 1px solid var(--color-border);
  }

  .page-header h1 {
    margin-top: 0;
    margin-bottom: var(--space-3);
  }

  .page-description {
    font-size: var(--text-lg);
    color: var(--color-text-muted);
    margin: 0;
  }

  .content-list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .content-list li {
    margin: 0 0 var(--space-4) 0;
  }

  .content-list a {
    display: block;
    padding: var(--space-4);
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-lg);
    color: var(--color-text);
    text-decoration: none;
    transition: border-color var(--transition-base),
      transform var(--transition-base);
  }

  .content-list a:hover {
    border-color: var(--color-accent);
    transform: translateY(-2px);
  }

  .content-header {
    display: flex;
    align-items: flex-start;
    gap: var(--space-3);
    margin-bottom: var(--space-2);
  }

  .content-title {
    flex: 1;
    font-size: var(--text-xl);
    margin: 0;
    transition: color var(--transition-base);
  }

  .content-list a:hover .content-title {
    color: var(--color-accent);
  }

  .content-meta {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    font-size: var(--text-sm);
    color: var(--color-text-muted);
  }

  .topics {
    text-transform: capitalize;
  }

  .separator {
    opacity: 0.5;
  }

  .empty-state {
    text-align: center;
    padding: var(--space-10);
    color: var(--color-text-muted);
  }

  .empty-state code {
    background-color: var(--color-code-bg);
    padding: 0.25em 0.5em;
    border-radius: var(--radius-sm);
  }
</style>
