---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import { getCollectionCounts } from '../lib/collection-counts';

// Get recent content
const allContent = await Promise.all([
  getCollection('notes'),
  getCollection('projects'),
  getCollection('journals'),
  getCollection('photography'),
  getCollection('collections'),
]).then((collections) => collections.flat());

// Sort by updated date and take the 5 most recent
const recentContent = allContent
  .filter((entry) => !entry.data.draft)
  .sort((a, b) => b.data.updated.getTime() - a.data.updated.getTime())
  .slice(0, 5);

// Get collection counts for conditional rendering
const counts = await getCollectionCounts();

// Define all explore cards
const allExploreCards = [
  {
    title: 'Notes',
    href: '/notes',
    description: 'Thoughts and ideas at various stages of development',
    collection: 'notes' as const,
  },
  {
    title: 'Projects',
    href: '/projects',
    description: "Portfolio of things I've built and designed",
    collection: 'projects' as const,
  },
  {
    title: 'Journals',
    href: '/journals',
    description: 'Development diaries and project logs',
    collection: 'journals' as const,
  },
  {
    title: 'Photography',
    href: '/photography',
    description: 'Photo essays and galleries from my travels',
    collection: 'photography' as const,
  },
  {
    title: 'Collections',
    href: '/collections',
    description: 'Curated lists and links on topics I care about',
    collection: 'collections' as const,
  },
];

// Filter to only show cards for collections with content
const visibleExploreCards = allExploreCards.filter(
  (card) => counts[card.collection] > 0
);
---

<BaseLayout title="Home">
  <div class="home">
    <section class="hero">
      <h1>Welcome to my digital garden</h1>
      <p class="lead">
        This is a space where I cultivate ideas, document projects, share
        photography, and collect things I find interesting. Like a garden, some
        thoughts are just seeds ðŸŒ±, others are growing ðŸŒ¿, and some will eventually
        mature into evergreen content ðŸŒ³.
      </p>
    </section>

    <section class="about">
      <h2>About</h2>
      <p>
        I'm a product manager by trade, with over 12 years experience working in digital delivery with roles spanning Project Management, User Experience Design, Design Thinking and Product Management. Outside of work, my interests span: photography (mainly travel and astro), 3D printing, software development, and board gaming.
      </p>
    </section>

    <section class="recent">
      <h2>Recently Updated</h2>
      {
        recentContent.length > 0 ? (
          <ul class="content-list">
            {recentContent.map((entry) => {
              const collection = entry.collection;
              const slug = entry.slug;
              return (
                <li>
                  <a href={`/${collection}/${slug}`}>
                    <span class="content-title">{entry.data.title}</span>
                    <span class="content-date">
                      {entry.data.updated.toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric',
                      })}
                    </span>
                  </a>
                </li>
              );
            })}
          </ul>
        ) : (
          <p class="text-muted">No content yet. Start creating!</p>
        )
      }
    </section>

    {
      visibleExploreCards.length > 0 && (
        <section class="explore">
          <h2>Explore</h2>
          <div class="explore-grid">
            {visibleExploreCards.map((card) => (
              <a href={card.href} class="explore-card">
                <h3>{card.title}</h3>
                <p>{card.description}</p>
              </a>
            ))}
          </div>
        </section>
      )
    }
  </div>
</BaseLayout>

<style>
  .home {
    max-width: var(--measure-wide);
  }

  .hero {
    margin-bottom: var(--space-12);
  }

  .hero h1 {
    margin-top: 0;
    margin-bottom: var(--space-5);
  }

  .lead {
    font-size: var(--text-lg);
    line-height: var(--leading-relaxed);
    color: var(--color-text-muted);
    max-width: var(--measure);
  }

  section {
    margin-bottom: var(--space-10);
  }

  section h2 {
    margin-top: 0;
    margin-bottom: var(--space-5);
  }

  .content-list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .content-list li {
    margin: 0;
    border-bottom: 1px solid var(--color-border);
  }

  .content-list li:last-child {
    border-bottom: none;
  }

  .content-list a {
    display: flex;
    justify-content: space-between;
    align-items: baseline;
    padding: var(--space-3) 0;
    color: var(--color-text);
    text-decoration: none;
    gap: var(--space-4);
  }

  .content-list a:hover .content-title {
    color: var(--color-accent);
  }

  .content-title {
    flex: 1;
    transition: color var(--transition-base);
  }

  .content-date {
    font-size: var(--text-sm);
    color: var(--color-text-muted);
    white-space: nowrap;
  }

  .explore-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: var(--space-4);
  }

  .explore-card {
    padding: var(--space-5);
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-lg);
    text-decoration: none;
    transition: border-color var(--transition-base),
      transform var(--transition-base);
  }

  .explore-card:hover {
    border-color: var(--color-accent);
    transform: translateY(-2px);
  }

  .explore-card h3 {
    margin-top: 0;
    margin-bottom: var(--space-2);
    font-size: var(--text-lg);
  }

  .explore-card p {
    margin: 0;
    font-size: var(--text-sm);
    color: var(--color-text-muted);
  }
</style>
