---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import ContentListItem from '../components/ContentListItem.astro';

// Get all content
const allContent = await Promise.all([
  getCollection('notes'),
  getCollection('projects'),
  getCollection('essays'),
  getCollection('resources'),
]).then((collections) => collections.flat());

// Filter out drafts and sort by updated date
const publishedContent = allContent
  .filter((entry) => !entry.data.draft)
  .sort((a, b) => b.data.updated.getTime() - a.data.updated.getTime());

// Helper function to get collection display name
function getCollectionDisplayName(collection: string): string {
  const names: Record<string, string> = {
    notes: 'Note',
    projects: 'Project',
    essays: 'Essay',
    resources: 'Resource',
  };
  return names[collection] || collection;
}

// Get collection type counts for the filter
const collectionCounts = {
  all: publishedContent.length,
  notes: publishedContent.filter(e => e.collection === 'notes').length,
  projects: publishedContent.filter(e => e.collection === 'projects').length,
  essays: publishedContent.filter(e => e.collection === 'essays').length,
  resources: publishedContent.filter(e => e.collection === 'resources').length,
};
---

<BaseLayout title="The Garden">
  <div class="garden">
    <section class="hero">
      <h1><strong>Greg</strong> writes about product, design thinking and the future.</h1>
      <p class="lead">
        Human-centered thinker working in UK civil service.
      </p>
    </section>

    <section class="content-section">
      <h2>My digital garden</h2>
      <p class="section-description">
        This is a space where I cultivate ideas, document projects, and collect things I find interesting. 
        <br/>
        Some thoughts are just seeds, others are growing, and some mature into evergreen content.
        <br/>
        Learn more about <a href="/notes/digital-gardens">digital gardens</a>.
      </p>

      <div class="filter-bar">
        <button class="filter-btn active" data-filter="all">
          All ({collectionCounts.all})
        </button>
        {collectionCounts.notes > 0 && (
          <button class="filter-btn" data-filter="notes">
            Notes ({collectionCounts.notes})
          </button>
        )}
        {collectionCounts.projects > 0 && (
          <button class="filter-btn" data-filter="projects">
            Projects ({collectionCounts.projects})
          </button>
        )}
        {collectionCounts.essays > 0 && (
          <button class="filter-btn" data-filter="essays">
            Essays ({collectionCounts.essays})
          </button>
        )}
        {collectionCounts.resources > 0 && (
          <button class="filter-btn" data-filter="resources">
            Resources ({collectionCounts.resources})
          </button>
        )}
      </div>

      {
        publishedContent.length > 0 ? (
          <ul class="content-list">
            {publishedContent.map((entry) => (
              <ContentListItem
                href={`/${entry.collection}/${entry.slug}`}
                title={entry.data.title}
                growth={entry.data.growth}
                date={entry.data.updated}
                additionalMeta={getCollectionDisplayName(entry.collection)}
                collection={entry.collection}
              />
            ))}
          </ul>
        ) : (
          <p class="text-muted">No content yet. Start creating!</p>
        )
      }
    </section>
  </div>
</BaseLayout>

<script>
  // Filter functionality
  const filterBtns = document.querySelectorAll('.filter-btn');
  const contentItems = document.querySelectorAll('.content-item');

  filterBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const filter = btn.getAttribute('data-filter');

      // Update active state
      filterBtns.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');

      // Filter content
      contentItems.forEach(item => {
        const collection = item.getAttribute('data-collection');
        if (filter === 'all' || collection === filter) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });
    });
  });
</script>

<style>
  .garden {
    max-width: 100%;
  }

  .hero {
    margin-bottom: var(--space-12);
  }

  .hero h1 {
    margin-top: 0;
    margin-bottom: var(--space-5);
    font-size: clamp(3rem, 5vw + 1rem, 4.5rem);
  }

  .hero h1 strong {
    font-weight: 700;
  }

  .lead {
    font-size: var(--text-2xl);
    font-weight: 300;
    line-height: var(--leading-relaxed);
    color: var(--color-text-muted);
    max-width: var(--measure);
  }

  .content-section {
    margin-bottom: var(--space-10);
  }

  .content-section h2 {
    margin-top: 0;
    margin-bottom: var(--space-4);
  }

  .section-description {
    font-size: var(--text-lg);
    line-height: var(--leading-relaxed);
    color: var(--color-text-muted);
    max-width: var(--measure);
    margin-bottom: var(--space-8);
  }

  .filter-bar {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-3);
    margin-bottom: var(--space-8);
    padding-bottom: var(--space-6);
    border-bottom: 1px solid var(--color-border);
  }

  .filter-btn {
    padding: var(--space-2) var(--space-4);
    background-color: var(--color-bg);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    color: var(--color-text);
    font-size: var(--text-base);
    cursor: pointer;
    transition: all var(--transition-base);
  }

  .filter-btn:hover {
    border-color: var(--color-accent);
    color: var(--color-accent);
  }

  .filter-btn.active {
    background-color: var(--color-accent);
    border-color: var(--color-accent);
    color: white;
  }

  .content-list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  @media (max-width: 768px) {
    .lead {
      font-size: var(--text-xl);
    }

    .filter-bar {
      gap: var(--space-2);
    }

    .filter-btn {
      font-size: var(--text-sm);
      padding: var(--space-2) var(--space-3);
    }
  }
</style>
