---
import { Image } from 'astro:assets';
import GalleryImage from './GalleryImage.astro';

interface Photo {
  src: string;
  alt: string;
  caption?: string;
}

interface Props {
  photos: Photo[];
  columns?: number;
}

const { photos, columns = 3 } = Astro.props;
---

<div class="gallery" data-columns={columns}>
  {
    photos.map((photo, index) => (
      <GalleryImage
        src={photo.src}
        alt={photo.alt}
        caption={photo.caption}
        index={index}
      />
    ))
  }
</div>

<!-- Lightbox -->
<div id="lightbox" class="lightbox" aria-hidden="true">
  <button
    class="lightbox-close"
    aria-label="Close lightbox"
    id="lightbox-close"
  >
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
    >
      <line x1="18" y1="6" x2="6" y2="18"></line>
      <line x1="6" y1="6" x2="18" y2="18"></line>
    </svg>
  </button>

  <button class="lightbox-nav lightbox-prev" aria-label="Previous image">
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
    >
      <polyline points="15 18 9 12 15 6"></polyline>
    </svg>
  </button>

  <button class="lightbox-nav lightbox-next" aria-label="Next image">
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
    >
      <polyline points="9 18 15 12 9 6"></polyline>
    </svg>
  </button>

  <div class="lightbox-content">
    <img id="lightbox-image" src="" alt="" />
    <div id="lightbox-caption" class="lightbox-caption"></div>
    <div id="lightbox-exif" class="lightbox-exif"></div>
  </div>
</div>

<script>
  // Lightbox functionality
  const lightbox = document.getElementById('lightbox');
  const lightboxImage = document.getElementById(
    'lightbox-image'
  ) as HTMLImageElement;
  const lightboxCaption = document.getElementById('lightbox-caption');
  const lightboxExif = document.getElementById('lightbox-exif');
  const closeBtn = document.getElementById('lightbox-close');
  const prevBtn = document.querySelector('.lightbox-prev');
  const nextBtn = document.querySelector('.lightbox-next');

  let currentIndex = 0;
  let images: HTMLElement[] = [];

  // Initialize gallery images
  function initGallery() {
    images = Array.from(
      document.querySelectorAll('.gallery-item')
    ) as HTMLElement[];

    images.forEach((img, index) => {
      img.addEventListener('click', () => openLightbox(index));
    });
  }

  function openLightbox(index: number) {
    currentIndex = index;
    updateLightbox();

    if (lightbox) {
      lightbox.classList.add('active');
      lightbox.setAttribute('aria-hidden', 'false');
      document.body.style.overflow = 'hidden';
    }
  }

  function closeLightbox() {
    if (lightbox) {
      lightbox.classList.remove('active');
      lightbox.setAttribute('aria-hidden', 'true');
      document.body.style.overflow = '';
    }
  }

  function updateLightbox() {
    const currentImage = images[currentIndex];
    if (!currentImage || !lightboxImage) return;

    const src = currentImage.dataset.src || '';
    const alt = currentImage.dataset.alt || '';
    const caption = currentImage.dataset.caption || '';
    const exif = currentImage.dataset.exif || '';

    lightboxImage.src = src;
    lightboxImage.alt = alt;

    if (lightboxCaption) {
      lightboxCaption.textContent = caption;
      lightboxCaption.style.display = caption ? 'block' : 'none';
    }

    if (lightboxExif) {
      lightboxExif.innerHTML = exif;
      lightboxExif.style.display = exif ? 'block' : 'none';
    }
  }

  function navigate(direction: number) {
    currentIndex = (currentIndex + direction + images.length) % images.length;
    updateLightbox();
  }

  // Event listeners
  closeBtn?.addEventListener('click', closeLightbox);
  prevBtn?.addEventListener('click', () => navigate(-1));
  nextBtn?.addEventListener('click', () => navigate(1));

  // Close on background click
  lightbox?.addEventListener('click', (e) => {
    if (e.target === lightbox) {
      closeLightbox();
    }
  });

  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (!lightbox?.classList.contains('active')) return;

    switch (e.key) {
      case 'Escape':
        closeLightbox();
        break;
      case 'ArrowLeft':
        navigate(-1);
        break;
      case 'ArrowRight':
        navigate(1);
        break;
    }
  });

  // Initialize on load
  initGallery();
</script>

<style>
  .gallery {
    display: grid;
    gap: var(--space-4);
    margin: var(--space-6) 0;
  }

  .gallery[data-columns='2'] {
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  }

  .gallery[data-columns='3'] {
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  }

  .gallery[data-columns='4'] {
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  }

  /* Lightbox */
  .lightbox {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.95);
    z-index: 1000;
    display: none;
    align-items: center;
    justify-content: center;
    padding: var(--space-6);
  }

  .lightbox.active {
    display: flex;
  }

  .lightbox-content {
    max-width: 90vw;
    max-height: 90vh;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .lightbox-content img {
    max-width: 100%;
    max-height: 70vh;
    object-fit: contain;
  }

  .lightbox-caption,
  .lightbox-exif {
    color: white;
    text-align: center;
    margin-top: var(--space-3);
    max-width: 600px;
  }

  .lightbox-caption {
    font-size: var(--text-base);
  }

  .lightbox-exif {
    font-size: var(--text-sm);
    color: rgba(255, 255, 255, 0.7);
    font-family: var(--font-mono);
  }

  .lightbox-close,
  .lightbox-nav {
    position: absolute;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: white;
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color var(--transition-base);
    border-radius: var(--radius-md);
  }

  .lightbox-close:hover,
  .lightbox-nav:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .lightbox-close {
    top: var(--space-4);
    right: var(--space-4);
  }

  .lightbox-prev {
    left: var(--space-4);
    top: 50%;
    transform: translateY(-50%);
  }

  .lightbox-next {
    right: var(--space-4);
    top: 50%;
    transform: translateY(-50%);
  }

  @media (max-width: 768px) {
    .lightbox-nav {
      bottom: var(--space-4);
      top: auto;
      transform: none;
    }

    .lightbox-prev {
      left: var(--space-4);
    }

    .lightbox-next {
      right: var(--space-4);
      left: auto;
    }
  }
</style>
